package favus

import (
	"fmt"

	"github.com/GoCOMA/Favus/internal/uploader"
	"github.com/spf13/cobra"
)

// Flags
var (
	resumeFilePath string // status file path generated during an interrupted upload
	resumeBucket   string
	resumeKey      string
	uploadID       string
)

var resumeCmd = &cobra.Command{
	Use:   "resume",
	Short: "Resume an interrupted multipart upload to S3",
	Long: `Resume an S3 multipart upload using a previously created status file.
If some fields are missing, they are taken from config/ENV, then prompted as needed.`,
	Example: `
  favus resume --file ./upload.status
  favus resume --file ~/.favus/status/large-test.bin_abcd1234.upload_status
  favus resume --auto  # automatically find the latest status file`,
	RunE: runResume,
}

func runResume(_ *cobra.Command, _ []string) error {
	// Validate status file presence first
	if err := ValidateFile(resumeFilePath); err != nil {
		return fmt.Errorf("status file validation failed: %w", err)
	}

	// Load status file to get bucket/key information
	status, err := uploader.LoadStatus(resumeFilePath)
	if err != nil {
		return fmt.Errorf("failed to load status file: %w", err)
	}

	// Use status file info as defaults, allow flag overrides
	bucketName := resumeBucket
	if bucketName == "" {
		bucketName = status.Bucket
	}
	keyName := resumeKey
	if keyName == "" {
		keyName = status.Key
	}
	uploadIDValue := uploadID
	if uploadIDValue == "" {
		uploadIDValue = status.UploadID
	}

	// Load and validate config with status file info
	conf, err := LoadConfigWithOverrides(bucketName, keyName, "")
	if err != nil {
		return err
	}

	// Apply uploadID from status file
	conf.UploadID = uploadIDValue

	// Validate that we have required fields (should be available from status file)
	if conf.Bucket == "" {
		return fmt.Errorf("bucket not found in status file or config")
	}
	if conf.Key == "" {
		return fmt.Errorf("key not found in status file or config")
	}

	// Prompt for UploadID if still missing
	if conf.UploadID == "" {
		conf.UploadID = PromptInput("üîÅ Enter Upload ID")
	}

	// Create uploader and resume upload
	up, err := CreateUploaderWithAWS(conf)
	if err != nil {
		return err
	}

	if err := up.ResumeUpload(resumeFilePath); err != nil {
		return fmt.Errorf("resume failed: %w", err)
	}

	fmt.Println("‚úÖ Resume completed")
	return nil
}

func init() {
	rootCmd.AddCommand(resumeCmd)

	resumeCmd.Flags().StringVarP(&resumeFilePath, "file", "f", "", "Path to status file generated by previous run (required)")
	resumeCmd.Flags().StringVarP(&resumeBucket, "bucket", "b", "", "S3 bucket name (overrides config/ENV)")
	resumeCmd.Flags().StringVarP(&resumeKey, "key", "k", "", "S3 object key (overrides config/ENV)")
	resumeCmd.Flags().StringVarP(&uploadID, "upload-id", "u", "", "Upload ID (overrides config/ENV)")

	_ = resumeCmd.MarkFlagRequired("file")
}
