package favus

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/GoCOMA/Favus/internal/awsutils"
	"github.com/GoCOMA/Favus/internal/uploader"
	"github.com/spf13/cobra"
)

// Flags
var (
	resumeFilePath string // status file path generated during an interrupted upload
	resumeBucket   string
	resumeKey      string
	uploadID       string
)

func promptInput(prompt string) string {
	reader := bufio.NewReader(os.Stdin)
	fmt.Printf("%s: ", prompt)
	in, _ := reader.ReadString('\n')
	return strings.TrimSpace(in)
}

var resumeCmd = &cobra.Command{
	Use:   "resume",
	Short: "Resume an interrupted multipart upload to S3",
	Long: `Resume an S3 multipart upload using a previously created status file.
If some fields are missing, they are taken from config/ENV, then prompted as needed.`,
	Example: `
  favus resume --file ./upload.status
  favus resume --file ./upload.status -c config.yaml`,
	RunE: func(cmd *cobra.Command, args []string) error {
		// 1) AWS config
		awsCfg, err := awsutils.LoadAWSConfig(profile)
		if err != nil {
			return fmt.Errorf("load aws config: %w", err)
		}

		// 2) Base config from file/ENV prepared by PersistentPreRunE
		conf := GetLoadedConfig()
		if conf == nil {
			return fmt.Errorf("config not loaded (PersistentPreRunE should have populated it)")
		}

		// 3) Overlay flags
		if resumeBucket != "" {
			conf.Bucket = strings.TrimSpace(resumeBucket)
		}
		if resumeKey != "" {
			conf.Key = strings.TrimSpace(resumeKey)
		}
		if uploadID != "" {
			conf.UploadID = strings.TrimSpace(uploadID)
		}

		// 4) Prompt for required fields if missing
		if strings.TrimSpace(conf.Bucket) == "" {
			conf.Bucket = promptInput("üîß Enter S3 bucket name")
		}
		if strings.TrimSpace(conf.Key) == "" {
			conf.Key = promptInput("üìù Enter S3 object key")
		}
		// UploadID may come from status file; if still empty we ask
		if strings.TrimSpace(conf.UploadID) == "" {
			conf.UploadID = promptInput("üîÅ Enter Upload ID")
		}

		// 5) Validate status file presence
		if _, err := os.Stat(resumeFilePath); os.IsNotExist(err) {
			return fmt.Errorf("status file not found: %s", resumeFilePath)
		}

		// 6) Resume
		up, err := uploader.NewUploaderWithAWSConfig(conf, awsCfg)
		if err != nil {
			return fmt.Errorf("init uploader: %w", err)
		}
		if err := up.ResumeUpload(resumeFilePath); err != nil {
			return fmt.Errorf("resume failed: %w", err)
		}

		fmt.Println("‚úÖ Resume completed")
		return nil
	},
}

func init() {
	rootCmd.AddCommand(resumeCmd)

	resumeCmd.Flags().StringVarP(&resumeFilePath, "file", "f", "", "Path to status file generated by previous run (required)")
	resumeCmd.Flags().StringVarP(&resumeBucket, "bucket", "b", "", "S3 bucket name (overrides config/ENV)")
	resumeCmd.Flags().StringVarP(&resumeKey, "key", "k", "", "S3 object key (overrides config/ENV)")
	resumeCmd.Flags().StringVarP(&uploadID, "upload-id", "u", "", "Upload ID (overrides config/ENV)")

	_ = resumeCmd.MarkFlagRequired("file")
}
